// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: usdtg/oracle/v1/oracle.proto

package oraclev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OracleService_GetPrice_FullMethodName     = "/usdtg.oracle.v1.OracleService/GetPrice"
	OracleService_StreamPrices_FullMethodName = "/usdtg.oracle.v1.OracleService/StreamPrices"
)

// OracleServiceClient is the client API for OracleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OracleServiceClient interface {
	GetPrice(ctx context.Context, in *GetPriceRequest, opts ...grpc.CallOption) (*GetPriceResponse, error)
	StreamPrices(ctx context.Context, in *StreamPricesRequest, opts ...grpc.CallOption) (OracleService_StreamPricesClient, error)
}

type oracleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOracleServiceClient(cc grpc.ClientConnInterface) OracleServiceClient {
	return &oracleServiceClient{cc}
}

func (c *oracleServiceClient) GetPrice(ctx context.Context, in *GetPriceRequest, opts ...grpc.CallOption) (*GetPriceResponse, error) {
	out := new(GetPriceResponse)
	err := c.cc.Invoke(ctx, OracleService_GetPrice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oracleServiceClient) StreamPrices(ctx context.Context, in *StreamPricesRequest, opts ...grpc.CallOption) (OracleService_StreamPricesClient, error) {
	stream, err := c.cc.NewStream(ctx, &OracleService_ServiceDesc.Streams[0], OracleService_StreamPrices_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &oracleServiceStreamPricesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OracleService_StreamPricesClient interface {
	Recv() (*StreamPricesResponse, error)
	grpc.ClientStream
}

type oracleServiceStreamPricesClient struct {
	grpc.ClientStream
}

func (x *oracleServiceStreamPricesClient) Recv() (*StreamPricesResponse, error) {
	m := new(StreamPricesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OracleServiceServer is the server API for OracleService service.
// All implementations must embed UnimplementedOracleServiceServer
// for forward compatibility
type OracleServiceServer interface {
	GetPrice(context.Context, *GetPriceRequest) (*GetPriceResponse, error)
	StreamPrices(*StreamPricesRequest, OracleService_StreamPricesServer) error
	mustEmbedUnimplementedOracleServiceServer()
}

// UnimplementedOracleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOracleServiceServer struct {
}

func (UnimplementedOracleServiceServer) GetPrice(context.Context, *GetPriceRequest) (*GetPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrice not implemented")
}
func (UnimplementedOracleServiceServer) StreamPrices(*StreamPricesRequest, OracleService_StreamPricesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamPrices not implemented")
}
func (UnimplementedOracleServiceServer) mustEmbedUnimplementedOracleServiceServer() {}

// UnsafeOracleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OracleServiceServer will
// result in compilation errors.
type UnsafeOracleServiceServer interface {
	mustEmbedUnimplementedOracleServiceServer()
}

func RegisterOracleServiceServer(s grpc.ServiceRegistrar, srv OracleServiceServer) {
	s.RegisterService(&OracleService_ServiceDesc, srv)
}

func _OracleService_GetPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OracleServiceServer).GetPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OracleService_GetPrice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OracleServiceServer).GetPrice(ctx, req.(*GetPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OracleService_StreamPrices_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamPricesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OracleServiceServer).StreamPrices(m, &oracleServiceStreamPricesServer{stream})
}

type OracleService_StreamPricesServer interface {
	Send(*StreamPricesResponse) error
	grpc.ServerStream
}

type oracleServiceStreamPricesServer struct {
	grpc.ServerStream
}

func (x *oracleServiceStreamPricesServer) Send(m *StreamPricesResponse) error {
	return x.ServerStream.SendMsg(m)
}

// OracleService_ServiceDesc is the grpc.ServiceDesc for OracleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OracleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "usdtg.oracle.v1.OracleService",
	HandlerType: (*OracleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPrice",
			Handler:    _OracleService_GetPrice_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamPrices",
			Handler:       _OracleService_StreamPrices_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "usdtg/oracle/v1/oracle.proto",
}
