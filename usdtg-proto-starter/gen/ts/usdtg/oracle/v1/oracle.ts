// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: usdtg/oracle/v1/oracle.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientReadableStream,
  type ClientUnaryCall,
  type handleServerStreamingCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { Timestamp } from "../../../google/protobuf/timestamp";

export const protobufPackage = "usdtg.oracle.v1";

export interface Price {
  /** e.g. "USDTG/USD" */
  pair: string;
  value: number;
  asOf?: Date | undefined;
}

export interface GetPriceRequest {
  pair: string;
}

export interface GetPriceResponse {
  price?: Price | undefined;
}

export interface StreamPricesRequest {
  pair: string;
}

export interface StreamPricesResponse {
  price?: Price | undefined;
}

function createBasePrice(): Price {
  return { pair: "", value: 0, asOf: undefined };
}

export const Price: MessageFns<Price> = {
  encode(message: Price, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pair !== "") {
      writer.uint32(10).string(message.pair);
    }
    if (message.value !== 0) {
      writer.uint32(17).double(message.value);
    }
    if (message.asOf !== undefined) {
      Timestamp.encode(toTimestamp(message.asOf), writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Price {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePrice();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pair = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.value = reader.double();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.asOf = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Price {
    return {
      pair: isSet(object.pair) ? globalThis.String(object.pair) : "",
      value: isSet(object.value) ? globalThis.Number(object.value) : 0,
      asOf: isSet(object.asOf) ? fromJsonTimestamp(object.asOf) : undefined,
    };
  },

  toJSON(message: Price): unknown {
    const obj: any = {};
    if (message.pair !== "") {
      obj.pair = message.pair;
    }
    if (message.value !== 0) {
      obj.value = message.value;
    }
    if (message.asOf !== undefined) {
      obj.asOf = message.asOf.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Price>, I>>(base?: I): Price {
    return Price.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Price>, I>>(object: I): Price {
    const message = createBasePrice();
    message.pair = object.pair ?? "";
    message.value = object.value ?? 0;
    message.asOf = object.asOf ?? undefined;
    return message;
  },
};

function createBaseGetPriceRequest(): GetPriceRequest {
  return { pair: "" };
}

export const GetPriceRequest: MessageFns<GetPriceRequest> = {
  encode(message: GetPriceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pair !== "") {
      writer.uint32(10).string(message.pair);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetPriceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPriceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pair = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPriceRequest {
    return { pair: isSet(object.pair) ? globalThis.String(object.pair) : "" };
  },

  toJSON(message: GetPriceRequest): unknown {
    const obj: any = {};
    if (message.pair !== "") {
      obj.pair = message.pair;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetPriceRequest>, I>>(base?: I): GetPriceRequest {
    return GetPriceRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetPriceRequest>, I>>(object: I): GetPriceRequest {
    const message = createBaseGetPriceRequest();
    message.pair = object.pair ?? "";
    return message;
  },
};

function createBaseGetPriceResponse(): GetPriceResponse {
  return { price: undefined };
}

export const GetPriceResponse: MessageFns<GetPriceResponse> = {
  encode(message: GetPriceResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.price !== undefined) {
      Price.encode(message.price, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetPriceResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetPriceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.price = Price.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetPriceResponse {
    return { price: isSet(object.price) ? Price.fromJSON(object.price) : undefined };
  },

  toJSON(message: GetPriceResponse): unknown {
    const obj: any = {};
    if (message.price !== undefined) {
      obj.price = Price.toJSON(message.price);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetPriceResponse>, I>>(base?: I): GetPriceResponse {
    return GetPriceResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetPriceResponse>, I>>(object: I): GetPriceResponse {
    const message = createBaseGetPriceResponse();
    message.price = (object.price !== undefined && object.price !== null) ? Price.fromPartial(object.price) : undefined;
    return message;
  },
};

function createBaseStreamPricesRequest(): StreamPricesRequest {
  return { pair: "" };
}

export const StreamPricesRequest: MessageFns<StreamPricesRequest> = {
  encode(message: StreamPricesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pair !== "") {
      writer.uint32(10).string(message.pair);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamPricesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamPricesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pair = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamPricesRequest {
    return { pair: isSet(object.pair) ? globalThis.String(object.pair) : "" };
  },

  toJSON(message: StreamPricesRequest): unknown {
    const obj: any = {};
    if (message.pair !== "") {
      obj.pair = message.pair;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StreamPricesRequest>, I>>(base?: I): StreamPricesRequest {
    return StreamPricesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StreamPricesRequest>, I>>(object: I): StreamPricesRequest {
    const message = createBaseStreamPricesRequest();
    message.pair = object.pair ?? "";
    return message;
  },
};

function createBaseStreamPricesResponse(): StreamPricesResponse {
  return { price: undefined };
}

export const StreamPricesResponse: MessageFns<StreamPricesResponse> = {
  encode(message: StreamPricesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.price !== undefined) {
      Price.encode(message.price, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamPricesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamPricesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.price = Price.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamPricesResponse {
    return { price: isSet(object.price) ? Price.fromJSON(object.price) : undefined };
  },

  toJSON(message: StreamPricesResponse): unknown {
    const obj: any = {};
    if (message.price !== undefined) {
      obj.price = Price.toJSON(message.price);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StreamPricesResponse>, I>>(base?: I): StreamPricesResponse {
    return StreamPricesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StreamPricesResponse>, I>>(object: I): StreamPricesResponse {
    const message = createBaseStreamPricesResponse();
    message.price = (object.price !== undefined && object.price !== null) ? Price.fromPartial(object.price) : undefined;
    return message;
  },
};

export type OracleServiceService = typeof OracleServiceService;
export const OracleServiceService = {
  getPrice: {
    path: "/usdtg.oracle.v1.OracleService/GetPrice",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetPriceRequest) => Buffer.from(GetPriceRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetPriceRequest.decode(value),
    responseSerialize: (value: GetPriceResponse) => Buffer.from(GetPriceResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetPriceResponse.decode(value),
  },
  streamPrices: {
    path: "/usdtg.oracle.v1.OracleService/StreamPrices",
    requestStream: false,
    responseStream: true,
    requestSerialize: (value: StreamPricesRequest) => Buffer.from(StreamPricesRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => StreamPricesRequest.decode(value),
    responseSerialize: (value: StreamPricesResponse) => Buffer.from(StreamPricesResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => StreamPricesResponse.decode(value),
  },
} as const;

export interface OracleServiceServer extends UntypedServiceImplementation {
  getPrice: handleUnaryCall<GetPriceRequest, GetPriceResponse>;
  streamPrices: handleServerStreamingCall<StreamPricesRequest, StreamPricesResponse>;
}

export interface OracleServiceClient extends Client {
  getPrice(
    request: GetPriceRequest,
    callback: (error: ServiceError | null, response: GetPriceResponse) => void,
  ): ClientUnaryCall;
  getPrice(
    request: GetPriceRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetPriceResponse) => void,
  ): ClientUnaryCall;
  getPrice(
    request: GetPriceRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetPriceResponse) => void,
  ): ClientUnaryCall;
  streamPrices(
    request: StreamPricesRequest,
    options?: Partial<CallOptions>,
  ): ClientReadableStream<StreamPricesResponse>;
  streamPrices(
    request: StreamPricesRequest,
    metadata?: Metadata,
    options?: Partial<CallOptions>,
  ): ClientReadableStream<StreamPricesResponse>;
}

export const OracleServiceClient = makeGenericClientConstructor(
  OracleServiceService,
  "usdtg.oracle.v1.OracleService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): OracleServiceClient;
  service: typeof OracleServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
