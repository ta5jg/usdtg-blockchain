// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: usdtg/token/v1/token.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { Timestamp } from "../../../google/protobuf/timestamp";

export const protobufPackage = "usdtg.token.v1";

export interface GetBalanceRequest {
  address: string;
}

export interface GetBalanceResponse {
  address: string;
  denom: string;
  amount: number;
  asOf?: Date | undefined;
}

export interface TransferRequest {
  fromAddress: string;
  toAddress: string;
  denom: string;
  amount: number;
}

export interface TransferResponse {
  txHash: string;
  accepted: boolean;
}

export interface MintRequest {
  toAddress: string;
  denom: string;
  amount: number;
}

export interface MintResponse {
  txHash: string;
  accepted: boolean;
}

function createBaseGetBalanceRequest(): GetBalanceRequest {
  return { address: "" };
}

export const GetBalanceRequest: MessageFns<GetBalanceRequest> = {
  encode(message: GetBalanceRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetBalanceRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetBalanceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetBalanceRequest {
    return { address: isSet(object.address) ? globalThis.String(object.address) : "" };
  },

  toJSON(message: GetBalanceRequest): unknown {
    const obj: any = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetBalanceRequest>, I>>(base?: I): GetBalanceRequest {
    return GetBalanceRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetBalanceRequest>, I>>(object: I): GetBalanceRequest {
    const message = createBaseGetBalanceRequest();
    message.address = object.address ?? "";
    return message;
  },
};

function createBaseGetBalanceResponse(): GetBalanceResponse {
  return { address: "", denom: "", amount: 0, asOf: undefined };
}

export const GetBalanceResponse: MessageFns<GetBalanceResponse> = {
  encode(message: GetBalanceResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (message.denom !== "") {
      writer.uint32(18).string(message.denom);
    }
    if (message.amount !== 0) {
      writer.uint32(24).uint64(message.amount);
    }
    if (message.asOf !== undefined) {
      Timestamp.encode(toTimestamp(message.asOf), writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetBalanceResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetBalanceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.denom = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.amount = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.asOf = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetBalanceResponse {
    return {
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
      asOf: isSet(object.asOf) ? fromJsonTimestamp(object.asOf) : undefined,
    };
  },

  toJSON(message: GetBalanceResponse): unknown {
    const obj: any = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    if (message.amount !== 0) {
      obj.amount = Math.round(message.amount);
    }
    if (message.asOf !== undefined) {
      obj.asOf = message.asOf.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetBalanceResponse>, I>>(base?: I): GetBalanceResponse {
    return GetBalanceResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetBalanceResponse>, I>>(object: I): GetBalanceResponse {
    const message = createBaseGetBalanceResponse();
    message.address = object.address ?? "";
    message.denom = object.denom ?? "";
    message.amount = object.amount ?? 0;
    message.asOf = object.asOf ?? undefined;
    return message;
  },
};

function createBaseTransferRequest(): TransferRequest {
  return { fromAddress: "", toAddress: "", denom: "", amount: 0 };
}

export const TransferRequest: MessageFns<TransferRequest> = {
  encode(message: TransferRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.fromAddress !== "") {
      writer.uint32(10).string(message.fromAddress);
    }
    if (message.toAddress !== "") {
      writer.uint32(18).string(message.toAddress);
    }
    if (message.denom !== "") {
      writer.uint32(26).string(message.denom);
    }
    if (message.amount !== 0) {
      writer.uint32(32).uint64(message.amount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TransferRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTransferRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.fromAddress = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.toAddress = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.denom = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.amount = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TransferRequest {
    return {
      fromAddress: isSet(object.fromAddress) ? globalThis.String(object.fromAddress) : "",
      toAddress: isSet(object.toAddress) ? globalThis.String(object.toAddress) : "",
      denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
    };
  },

  toJSON(message: TransferRequest): unknown {
    const obj: any = {};
    if (message.fromAddress !== "") {
      obj.fromAddress = message.fromAddress;
    }
    if (message.toAddress !== "") {
      obj.toAddress = message.toAddress;
    }
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    if (message.amount !== 0) {
      obj.amount = Math.round(message.amount);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TransferRequest>, I>>(base?: I): TransferRequest {
    return TransferRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TransferRequest>, I>>(object: I): TransferRequest {
    const message = createBaseTransferRequest();
    message.fromAddress = object.fromAddress ?? "";
    message.toAddress = object.toAddress ?? "";
    message.denom = object.denom ?? "";
    message.amount = object.amount ?? 0;
    return message;
  },
};

function createBaseTransferResponse(): TransferResponse {
  return { txHash: "", accepted: false };
}

export const TransferResponse: MessageFns<TransferResponse> = {
  encode(message: TransferResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.txHash !== "") {
      writer.uint32(10).string(message.txHash);
    }
    if (message.accepted !== false) {
      writer.uint32(16).bool(message.accepted);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TransferResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTransferResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.txHash = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.accepted = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TransferResponse {
    return {
      txHash: isSet(object.txHash) ? globalThis.String(object.txHash) : "",
      accepted: isSet(object.accepted) ? globalThis.Boolean(object.accepted) : false,
    };
  },

  toJSON(message: TransferResponse): unknown {
    const obj: any = {};
    if (message.txHash !== "") {
      obj.txHash = message.txHash;
    }
    if (message.accepted !== false) {
      obj.accepted = message.accepted;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TransferResponse>, I>>(base?: I): TransferResponse {
    return TransferResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TransferResponse>, I>>(object: I): TransferResponse {
    const message = createBaseTransferResponse();
    message.txHash = object.txHash ?? "";
    message.accepted = object.accepted ?? false;
    return message;
  },
};

function createBaseMintRequest(): MintRequest {
  return { toAddress: "", denom: "", amount: 0 };
}

export const MintRequest: MessageFns<MintRequest> = {
  encode(message: MintRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.toAddress !== "") {
      writer.uint32(10).string(message.toAddress);
    }
    if (message.denom !== "") {
      writer.uint32(18).string(message.denom);
    }
    if (message.amount !== 0) {
      writer.uint32(24).uint64(message.amount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MintRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMintRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.toAddress = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.denom = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.amount = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MintRequest {
    return {
      toAddress: isSet(object.toAddress) ? globalThis.String(object.toAddress) : "",
      denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
    };
  },

  toJSON(message: MintRequest): unknown {
    const obj: any = {};
    if (message.toAddress !== "") {
      obj.toAddress = message.toAddress;
    }
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    if (message.amount !== 0) {
      obj.amount = Math.round(message.amount);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MintRequest>, I>>(base?: I): MintRequest {
    return MintRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MintRequest>, I>>(object: I): MintRequest {
    const message = createBaseMintRequest();
    message.toAddress = object.toAddress ?? "";
    message.denom = object.denom ?? "";
    message.amount = object.amount ?? 0;
    return message;
  },
};

function createBaseMintResponse(): MintResponse {
  return { txHash: "", accepted: false };
}

export const MintResponse: MessageFns<MintResponse> = {
  encode(message: MintResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.txHash !== "") {
      writer.uint32(10).string(message.txHash);
    }
    if (message.accepted !== false) {
      writer.uint32(16).bool(message.accepted);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MintResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMintResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.txHash = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.accepted = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MintResponse {
    return {
      txHash: isSet(object.txHash) ? globalThis.String(object.txHash) : "",
      accepted: isSet(object.accepted) ? globalThis.Boolean(object.accepted) : false,
    };
  },

  toJSON(message: MintResponse): unknown {
    const obj: any = {};
    if (message.txHash !== "") {
      obj.txHash = message.txHash;
    }
    if (message.accepted !== false) {
      obj.accepted = message.accepted;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MintResponse>, I>>(base?: I): MintResponse {
    return MintResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MintResponse>, I>>(object: I): MintResponse {
    const message = createBaseMintResponse();
    message.txHash = object.txHash ?? "";
    message.accepted = object.accepted ?? false;
    return message;
  },
};

export type TokenServiceService = typeof TokenServiceService;
export const TokenServiceService = {
  getBalance: {
    path: "/usdtg.token.v1.TokenService/GetBalance",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetBalanceRequest) => Buffer.from(GetBalanceRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetBalanceRequest.decode(value),
    responseSerialize: (value: GetBalanceResponse) => Buffer.from(GetBalanceResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetBalanceResponse.decode(value),
  },
  transfer: {
    path: "/usdtg.token.v1.TokenService/Transfer",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: TransferRequest) => Buffer.from(TransferRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => TransferRequest.decode(value),
    responseSerialize: (value: TransferResponse) => Buffer.from(TransferResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => TransferResponse.decode(value),
  },
  mint: {
    path: "/usdtg.token.v1.TokenService/Mint",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: MintRequest) => Buffer.from(MintRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => MintRequest.decode(value),
    responseSerialize: (value: MintResponse) => Buffer.from(MintResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => MintResponse.decode(value),
  },
} as const;

export interface TokenServiceServer extends UntypedServiceImplementation {
  getBalance: handleUnaryCall<GetBalanceRequest, GetBalanceResponse>;
  transfer: handleUnaryCall<TransferRequest, TransferResponse>;
  mint: handleUnaryCall<MintRequest, MintResponse>;
}

export interface TokenServiceClient extends Client {
  getBalance(
    request: GetBalanceRequest,
    callback: (error: ServiceError | null, response: GetBalanceResponse) => void,
  ): ClientUnaryCall;
  getBalance(
    request: GetBalanceRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetBalanceResponse) => void,
  ): ClientUnaryCall;
  getBalance(
    request: GetBalanceRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetBalanceResponse) => void,
  ): ClientUnaryCall;
  transfer(
    request: TransferRequest,
    callback: (error: ServiceError | null, response: TransferResponse) => void,
  ): ClientUnaryCall;
  transfer(
    request: TransferRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: TransferResponse) => void,
  ): ClientUnaryCall;
  transfer(
    request: TransferRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: TransferResponse) => void,
  ): ClientUnaryCall;
  mint(request: MintRequest, callback: (error: ServiceError | null, response: MintResponse) => void): ClientUnaryCall;
  mint(
    request: MintRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: MintResponse) => void,
  ): ClientUnaryCall;
  mint(
    request: MintRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: MintResponse) => void,
  ): ClientUnaryCall;
}

export const TokenServiceClient = makeGenericClientConstructor(
  TokenServiceService,
  "usdtg.token.v1.TokenService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): TokenServiceClient;
  service: typeof TokenServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
