/// This file is auto-generated by Scribble and shouldn't be edited directly.
/// Use --disarm prior to make any changes.
pragma solidity 0.8.29;

type ShortString is bytes32;

///  @dev External interface of AccessControl declared to support ERC165 detection.
interface IAccessControl {
    ///  @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`
    ///  `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite
    ///  {RoleAdminChanged} not being emitted signaling this.
    ///  _Available since v3.1._
    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);

    ///  @dev Emitted when `account` is granted `role`.
    ///  `sender` is the account that originated the contract call, an admin role
    ///  bearer except when using {AccessControl-_setupRole}.
    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);

    ///  @dev Emitted when `account` is revoked `role`.
    ///  `sender` is the account that originated the contract call:
    ///    - if using `revokeRole`, it is the admin role bearer
    ///    - if using `renounceRole`, it is the role bearer (i.e. `account`)
    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);

    ///  @dev Returns `true` if `account` has been granted `role`.
    function hasRole(bytes32 role, address account) external view returns (bool);

    ///  @dev Returns the admin role that controls `role`. See {grantRole} and
    ///  {revokeRole}.
    ///  To change a role's admin, use {AccessControl-_setRoleAdmin}.
    function getRoleAdmin(bytes32 role) external view returns (bytes32);

    ///  @dev Grants `role` to `account`.
    ///  If `account` had not been already granted `role`, emits a {RoleGranted}
    ///  event.
    ///  Requirements:
    ///  - the caller must have ``role``'s admin role.
    function grantRole(bytes32 role, address account) external;

    ///  @dev Revokes `role` from `account`.
    ///  If `account` had been granted `role`, emits a {RoleRevoked} event.
    ///  Requirements:
    ///  - the caller must have ``role``'s admin role.
    function revokeRole(bytes32 role, address account) external;

    ///  @dev Revokes `role` from the calling account.
    ///  Roles are often managed via {grantRole} and {revokeRole}: this function's
    ///  purpose is to provide a mechanism for accounts to lose their privileges
    ///  if they are compromised (such as when a trusted device is misplaced).
    ///  If the calling account had been granted `role`, emits a {RoleRevoked}
    ///  event.
    ///  Requirements:
    ///  - the caller must be `account`.
    function renounceRole(bytes32 role, address account) external;
}

interface IERC5267 {
    ///  @dev MAY be emitted to signal that the domain could have changed.
    event EIP712DomainChanged();

    ///  @dev returns the fields and values that describe the domain separator used by this contract for EIP-712
    ///  signature.
    function eip712Domain() external view returns (bytes1 fields, string memory name, string memory version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] memory extensions);
}

///  @dev Interface of the ERC20 standard as defined in the EIP.
interface IERC20 {
    ///  @dev Emitted when `value` tokens are moved from one account (`from`) to
    ///  another (`to`).
    ///  Note that `value` may be zero.
    event Transfer(address indexed from, address indexed to, uint256 value);

    ///  @dev Emitted when the allowance of a `spender` for an `owner` is set by
    ///  a call to {approve}. `value` is the new allowance.
    event Approval(address indexed owner, address indexed spender, uint256 value);

    ///  @dev Returns the amount of tokens in existence.
    function totalSupply() external view returns (uint256);

    ///  @dev Returns the amount of tokens owned by `account`.
    function balanceOf(address account) external view returns (uint256);

    ///  @dev Moves `amount` tokens from the caller's account to `to`.
    ///  Returns a boolean value indicating whether the operation succeeded.
    ///  Emits a {Transfer} event.
    function transfer(address to, uint256 amount) external returns (bool);

    ///  @dev Returns the remaining number of tokens that `spender` will be
    ///  allowed to spend on behalf of `owner` through {transferFrom}. This is
    ///  zero by default.
    ///  This value changes when {approve} or {transferFrom} are called.
    function allowance(address owner, address spender) external view returns (uint256);

    ///  @dev Sets `amount` as the allowance of `spender` over the caller's tokens.
    ///  Returns a boolean value indicating whether the operation succeeded.
    ///  IMPORTANT: Beware that changing an allowance with this method brings the risk
    ///  that someone may use both the old and the new allowance by unfortunate
    ///  transaction ordering. One possible solution to mitigate this race
    ///  condition is to first reduce the spender's allowance to 0 and set the
    ///  desired value afterwards:
    ///  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
    ///  Emits an {Approval} event.
    function approve(address spender, uint256 amount) external returns (bool);

    ///  @dev Moves `amount` tokens from `from` to `to` using the
    ///  allowance mechanism. `amount` is then deducted from the caller's
    ///  allowance.
    ///  Returns a boolean value indicating whether the operation succeeded.
    ///  Emits a {Transfer} event.
    function transferFrom(address from, address to, uint256 amount) external returns (bool);
}

///  @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in
///  https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].
///  Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by
///  presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't
///  need to send a transaction, and thus is not required to hold Ether at all.
///  ==== Security Considerations
///  There are two important considerations concerning the use of `permit`. The first is that a valid permit signature
///  expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be
///  considered as an intention to spend the allowance in any specific way. The second is that because permits have
///  built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should
///  take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be
///  generally recommended is:
///  ```solidity
///  function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {
///      try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}
///      doThing(..., value);
///  }
///  function doThing(..., uint256 value) public {
///      token.safeTransferFrom(msg.sender, address(this), value);
///      ...
///  }
///  ```
///  Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of
///  `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also
///  {SafeERC20-safeTransferFrom}).
///  Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so
///  contracts should have entry points that don't rely on permit.
interface IERC20Permit {
    ///  @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,
    ///  given ``owner``'s signed approval.
    ///  IMPORTANT: The same issues {IERC20-approve} has related to transaction
    ///  ordering also apply here.
    ///  Emits an {Approval} event.
    ///  Requirements:
    ///  - `spender` cannot be the zero address.
    ///  - `deadline` must be a timestamp in the future.
    ///  - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`
    ///  over the EIP712-formatted function arguments.
    ///  - the signature must use ``owner``'s current nonce (see {nonces}).
    ///  For more information on the signature format, see the
    ///  https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP
    ///  section].
    ///  CAUTION: See Security Considerations above.
    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;

    ///  @dev Returns the current nonce for `owner`. This value must be
    ///  included whenever a signature is generated for {permit}.
    ///  Every successful call to {permit} increases ``owner``'s nonce by one. This
    ///  prevents a signature from being used multiple times.
    function nonces(address owner) external view returns (uint256);

    ///  @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.
    function DOMAIN_SEPARATOR() external view returns (bytes32);
}

///  @dev Provides information about the current execution context, including the
///  sender of the transaction and its data. While these are generally available
///  via msg.sender and msg.data, they should not be accessed in such a direct
///  manner, since when dealing with meta-transactions the account sending and
///  paying for execution may not be the actual sender (as far as an application
///  is concerned).
///  This contract is only required for intermediate, library-like contracts.
abstract contract Context {
    function _msgSender() virtual internal view returns (address) {
        return msg.sender;
    }

    function _msgData() virtual internal view returns (bytes calldata) {
        return msg.data;
    }

    function _contextSuffixLength() virtual internal view returns (uint256) {
        return 0;
    }
}

///  @title Counters
///  @author Matt Condon (@shrugs)
///  @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number
///  of elements in a mapping, issuing ERC721 ids, or counting request ids.
///  Include with `using Counters for Counters.Counter;`
library Counters {
    struct Counter {
        uint256 _value;
    }

    function current(Counter storage counter) internal view returns (uint256) {
        return counter._value;
    }

    function increment(Counter storage counter) internal {
        unchecked {
            counter._value += 1;
        }
    }

    function decrement(Counter storage counter) internal {
        uint256 value = counter._value;
        require(value > 0, "Counter: decrement overflow");
        unchecked {
            counter._value = value - 1;
        }
    }

    function reset(Counter storage counter) internal {
        counter._value = 0;
    }
}

///  @dev This library provides functions to convert short memory strings
///  into a `ShortString` type that can be used as an immutable variable.
///  Strings of arbitrary length can be optimized using this library if
///  they are short enough (up to 31 bytes) by packing them with their
///  length (1 byte) in a single EVM word (32 bytes). Additionally, a
///  fallback mechanism can be used for every other case.
///  Usage example:
///  ```solidity
///  contract Named {
///      using ShortStrings for *;
///      ShortString private immutable _name;
///      string private _nameFallback;
///      constructor(string memory contractName) {
///          _name = contractName.toShortStringWithFallback(_nameFallback);
///      }
///      function name() external view returns (string memory) {
///          return _name.toStringWithFallback(_nameFallback);
///      }
///  }
///  ```
library ShortStrings {
    error StringTooLong(string str);

    error InvalidShortString();

    bytes32 private constant _FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;

    ///  @dev Encode a string of at most 31 chars into a `ShortString`.
    ///  This will trigger a `StringTooLong` error is the input string is too long.
    function toShortString(string memory str) internal pure returns (ShortString) {
        bytes memory bstr = bytes(str);
        if (bstr.length > 31) {
            revert StringTooLong(str);
        }
        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));
    }

    ///  @dev Decode a `ShortString` back to a "normal" string.
    function toString(ShortString sstr) internal pure returns (string memory) {
        uint256 len = byteLength(sstr);
        string memory str = new string(32);
        /// @solidity memory-safe-assembly
        assembly {
            mstore(str, len)
            mstore(add(str, 0x20), sstr)
        }
        return str;
    }

    ///  @dev Return the length of a `ShortString`.
    function byteLength(ShortString sstr) internal pure returns (uint256) {
        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;
        if (result > 31) {
            revert InvalidShortString();
        }
        return result;
    }

    ///  @dev Encode a string into a `ShortString`, or write it to storage if it is too long.
    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {
        if (bytes(value).length < 32) {
            return toShortString(value);
        } else {
            StorageSlot.getStringSlot(store).value = value;
            return ShortString.wrap(_FALLBACK_SENTINEL);
        }
    }

    ///  @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.
    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {
        if (ShortString.unwrap(value) != _FALLBACK_SENTINEL) {
            return toString(value);
        } else {
            return store;
        }
    }

    ///  @dev Return the length of a string that was encoded to `ShortString` or written to storage using {setWithFallback}.
    ///  WARNING: This will return the "byte length" of the string. This may not reflect the actual length in terms of
    ///  actual characters as the UTF-8 encoding of a single character can span over multiple bytes.
    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {
        if (ShortString.unwrap(value) != _FALLBACK_SENTINEL) {
            return byteLength(value);
        } else {
            return bytes(store).length;
        }
    }
}

///  @dev Library for reading and writing primitive types to specific storage slots.
///  Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.
///  This library helps with reading and writing to such slots without the need for inline assembly.
///  The functions in this library return Slot structs that contain a `value` member that can be used to read or write.
///  Example usage to set ERC1967 implementation slot:
///  ```solidity
///  contract ERC1967 {
///      bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;
///      function _getImplementation() internal view returns (address) {
///          return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;
///      }
///      function _setImplementation(address newImplementation) internal {
///          require(Address.isContract(newImplementation), "ERC1967: new implementation is not a contract");
///          StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;
///      }
///  }
///  ```
///  _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._
///  _Available since v4.9 for `string`, `bytes`._
library StorageSlot {
    struct AddressSlot {
        address value;
    }

    struct BooleanSlot {
        bool value;
    }

    struct Bytes32Slot {
        bytes32 value;
    }

    struct Uint256Slot {
        uint256 value;
    }

    struct StringSlot {
        string value;
    }

    struct BytesSlot {
        bytes value;
    }

    ///  @dev Returns an `AddressSlot` with member `value` located at `slot`.
    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {
        /// @solidity memory-safe-assembly
        assembly {
            r.slot := slot
        }
    }

    ///  @dev Returns an `BooleanSlot` with member `value` located at `slot`.
    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {
        /// @solidity memory-safe-assembly
        assembly {
            r.slot := slot
        }
    }

    ///  @dev Returns an `Bytes32Slot` with member `value` located at `slot`.
    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {
        /// @solidity memory-safe-assembly
        assembly {
            r.slot := slot
        }
    }

    ///  @dev Returns an `Uint256Slot` with member `value` located at `slot`.
    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {
        /// @solidity memory-safe-assembly
        assembly {
            r.slot := slot
        }
    }

    ///  @dev Returns an `StringSlot` with member `value` located at `slot`.
    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {
        /// @solidity memory-safe-assembly
        assembly {
            r.slot := slot
        }
    }

    ///  @dev Returns an `StringSlot` representation of the string storage pointer `store`.
    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {
        /// @solidity memory-safe-assembly
        assembly {
            r.slot := store.slot
        }
    }

    ///  @dev Returns an `BytesSlot` with member `value` located at `slot`.
    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {
        /// @solidity memory-safe-assembly
        assembly {
            r.slot := slot
        }
    }

    ///  @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.
    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {
        /// @solidity memory-safe-assembly
        assembly {
            r.slot := store.slot
        }
    }
}

///  @dev String operations.
library Strings {
    bytes16 private constant _SYMBOLS = "0123456789abcdef";
    uint8 private constant _ADDRESS_LENGTH = 20;

    ///  @dev Converts a `uint256` to its ASCII `string` decimal representation.
    function toString(uint256 value) internal pure returns (string memory) {
        unchecked {
            uint256 length = Math.log10(value) + 1;
            string memory buffer = new string(length);
            uint256 ptr;
            /// @solidity memory-safe-assembly
            assembly {
                ptr := add(buffer, add(32, length))
            }
            while (true) {
                ptr--;
                /// @solidity memory-safe-assembly
                assembly {
                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))
                }
                value /= 10;
                if (value == 0) break;
            }
            return buffer;
        }
    }

    ///  @dev Converts a `int256` to its ASCII `string` decimal representation.
    function toString(int256 value) internal pure returns (string memory) {
        return string(abi.encodePacked((value < 0) ? "-" : "", toString(SignedMath.abs(value))));
    }

    ///  @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.
    function toHexString(uint256 value) internal pure returns (string memory) {
        unchecked {
            return toHexString(value, Math.log256(value) + 1);
        }
    }

    ///  @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.
    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
        bytes memory buffer = new bytes((2 * length) + 2);
        buffer[0] = "0";
        buffer[1] = "x";
        for (uint256 i = (2 * length) + 1; i > 1; --i) {
            buffer[i] = _SYMBOLS[value & 0xf];
            value >>= 4;
        }
        require(value == 0, "Strings: hex length insufficient");
        return string(buffer);
    }

    ///  @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.
    function toHexString(address addr) internal pure returns (string memory) {
        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);
    }

    ///  @dev Returns true if the two strings are equal.
    function equal(string memory a, string memory b) internal pure returns (bool) {
        return keccak256(bytes(a)) == keccak256(bytes(b));
    }
}

///  @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.
///  These functions can be used to verify that a message was signed by the holder
///  of the private keys of a given address.
library ECDSA {
    enum RecoverError {
        NoError,
        InvalidSignature,
        InvalidSignatureLength,
        InvalidSignatureS,
        InvalidSignatureV
    }

    function _throwError(RecoverError error) private pure {
        if (error == RecoverError.NoError) {
            return;
        } else if (error == RecoverError.InvalidSignature) {
            revert("ECDSA: invalid signature");
        } else if (error == RecoverError.InvalidSignatureLength) {
            revert("ECDSA: invalid signature length");
        } else if (error == RecoverError.InvalidSignatureS) {
            revert("ECDSA: invalid signature 's' value");
        }
    }

    ///  @dev Returns the address that signed a hashed message (`hash`) with
    ///  `signature` or error string. This address can then be used for verification purposes.
    ///  The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:
    ///  this function rejects them by requiring the `s` value to be in the lower
    ///  half order, and the `v` value to be either 27 or 28.
    ///  IMPORTANT: `hash` _must_ be the result of a hash operation for the
    ///  verification to be secure: it is possible to craft signatures that
    ///  recover to arbitrary addresses for non-hashed data. A safe way to ensure
    ///  this is by receiving a hash of the original message (which may otherwise
    ///  be too long), and then calling {toEthSignedMessageHash} on it.
    ///  Documentation for signature generation:
    ///  - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]
    ///  - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]
    ///  _Available since v4.3._
    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {
        if (signature.length == 65) {
            bytes32 r;
            bytes32 s;
            uint8 v;
            /// @solidity memory-safe-assembly
            assembly {
                r := mload(add(signature, 0x20))
                s := mload(add(signature, 0x40))
                v := byte(0, mload(add(signature, 0x60)))
            }
            return tryRecover(hash, v, r, s);
        } else {
            return (address(0), RecoverError.InvalidSignatureLength);
        }
    }

    ///  @dev Returns the address that signed a hashed message (`hash`) with
    ///  `signature`. This address can then be used for verification purposes.
    ///  The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:
    ///  this function rejects them by requiring the `s` value to be in the lower
    ///  half order, and the `v` value to be either 27 or 28.
    ///  IMPORTANT: `hash` _must_ be the result of a hash operation for the
    ///  verification to be secure: it is possible to craft signatures that
    ///  recover to arbitrary addresses for non-hashed data. A safe way to ensure
    ///  this is by receiving a hash of the original message (which may otherwise
    ///  be too long), and then calling {toEthSignedMessageHash} on it.
    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {
        (address recovered, RecoverError error) = tryRecover(hash, signature);
        _throwError(error);
        return recovered;
    }

    ///  @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.
    ///  See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]
    ///  _Available since v4.3._
    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {
        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);
        uint8 v = uint8((uint256(vs) >> 255) + 27);
        return tryRecover(hash, v, r, s);
    }

    ///  @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.
    ///  _Available since v4.2._
    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {
        (address recovered, RecoverError error) = tryRecover(hash, r, vs);
        _throwError(error);
        return recovered;
    }

    ///  @dev Overload of {ECDSA-tryRecover} that receives the `v`,
    ///  `r` and `s` signature fields separately.
    ///  _Available since v4.3._
    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {
        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {
            return (address(0), RecoverError.InvalidSignatureS);
        }
        address signer = ecrecover(hash, v, r, s);
        if (signer == address(0)) {
            return (address(0), RecoverError.InvalidSignature);
        }
        return (signer, RecoverError.NoError);
    }

    ///  @dev Overload of {ECDSA-recover} that receives the `v`,
    ///  `r` and `s` signature fields separately.
    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {
        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);
        _throwError(error);
        return recovered;
    }

    ///  @dev Returns an Ethereum Signed Message, created from a `hash`. This
    ///  produces hash corresponding to the one signed with the
    ///  https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]
    ///  JSON-RPC method as part of EIP-191.
    ///  See {recover}.
    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {
        /// @solidity memory-safe-assembly
        assembly {
            mstore(0x00, "\u0019Ethereum Signed Message:\n32")
            mstore(0x1c, hash)
            message := keccak256(0x00, 0x3c)
        }
    }

    ///  @dev Returns an Ethereum Signed Message, created from `s`. This
    ///  produces hash corresponding to the one signed with the
    ///  https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]
    ///  JSON-RPC method as part of EIP-191.
    ///  See {recover}.
    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {
        return keccak256(abi.encodePacked("\u0019Ethereum Signed Message:\n", Strings.toString(s.length), s));
    }

    ///  @dev Returns an Ethereum Signed Typed Data, created from a
    ///  `domainSeparator` and a `structHash`. This produces hash corresponding
    ///  to the one signed with the
    ///  https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]
    ///  JSON-RPC method as part of EIP-712.
    ///  See {recover}.
    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {
        /// @solidity memory-safe-assembly
        assembly {
            let ptr := mload(0x40)
            mstore(ptr, "\u0019\u0001")
            mstore(add(ptr, 0x02), domainSeparator)
            mstore(add(ptr, 0x22), structHash)
            data := keccak256(ptr, 0x42)
        }
    }

    ///  @dev Returns an Ethereum Signed Data with intended validator, created from a
    ///  `validator` and `data` according to the version 0 of EIP-191.
    ///  See {recover}.
    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {
        return keccak256(abi.encodePacked("\u0019\u0000", validator, data));
    }
}

///  @dev Interface of the ERC165 standard, as defined in the
///  https://eips.ethereum.org/EIPS/eip-165[EIP].
///  Implementers can declare support of contract interfaces, which can then be
///  queried by others ({ERC165Checker}).
///  For an implementation, see {ERC165}.
interface IERC165 {
    ///  @dev Returns true if this contract implements the interface defined by
    ///  `interfaceId`. See the corresponding
    ///  https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]
    ///  to learn more about how these ids are created.
    ///  This function call must use less than 30 000 gas.
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}

///  @dev Standard math utilities missing in the Solidity language.
library Math {
    enum Rounding {
        Down,
        Up,
        Zero
    }

    ///  @dev Returns the largest of two numbers.
    function max(uint256 a, uint256 b) internal pure returns (uint256) {
        return (a > b) ? a : b;
    }

    ///  @dev Returns the smallest of two numbers.
    function min(uint256 a, uint256 b) internal pure returns (uint256) {
        return (a < b) ? a : b;
    }

    ///  @dev Returns the average of two numbers. The result is rounded towards
    ///  zero.
    function average(uint256 a, uint256 b) internal pure returns (uint256) {
        return (a & b) + ((a ^ b) / 2);
    }

    ///  @dev Returns the ceiling of the division of two numbers.
    ///  This differs from standard division with `/` in that it rounds up instead
    ///  of rounding down.
    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {
        return (a == 0) ? 0 : (((a - 1) / b) + 1);
    }

    ///  @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0
    ///  @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)
    ///  with further edits by Uniswap Labs also under MIT license.
    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {
        unchecked {
            uint256 prod0;
            uint256 prod1;
            assembly {
                let mm := mulmod(x, y, not(0))
                prod0 := mul(x, y)
                prod1 := sub(sub(mm, prod0), lt(mm, prod0))
            }
            if (prod1 == 0) {
                return prod0 / denominator;
            }
            require(denominator > prod1, "Math: mulDiv overflow");
            uint256 remainder;
            assembly {
                remainder := mulmod(x, y, denominator)
                prod1 := sub(prod1, gt(remainder, prod0))
                prod0 := sub(prod0, remainder)
            }
            uint256 twos = denominator & ((~denominator) + 1);
            assembly {
                denominator := div(denominator, twos)
                prod0 := div(prod0, twos)
                twos := add(div(sub(0, twos), twos), 1)
            }
            prod0 |= prod1 * twos;
            uint256 inverse = (3 * denominator) ^ 2;
            inverse *= 2 - (denominator * inverse);
            inverse *= 2 - (denominator * inverse);
            inverse *= 2 - (denominator * inverse);
            inverse *= 2 - (denominator * inverse);
            inverse *= 2 - (denominator * inverse);
            inverse *= 2 - (denominator * inverse);
            result = prod0 * inverse;
            return result;
        }
    }

    ///  @notice Calculates x * y / denominator with full precision, following the selected rounding direction.
    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {
        uint256 result = mulDiv(x, y, denominator);
        if ((rounding == Rounding.Up) && (mulmod(x, y, denominator) > 0)) {
            result += 1;
        }
        return result;
    }

    ///  @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.
    ///  Inspired by Henry S. Warren, Jr.'s "Hacker's Delight" (Chapter 11).
    function sqrt(uint256 a) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 result = 1 << (log2(a) >> 1);
        unchecked {
            result = (result + (a / result)) >> 1;
            result = (result + (a / result)) >> 1;
            result = (result + (a / result)) >> 1;
            result = (result + (a / result)) >> 1;
            result = (result + (a / result)) >> 1;
            result = (result + (a / result)) >> 1;
            result = (result + (a / result)) >> 1;
            return min(result, a / result);
        }
    }

    ///  @notice Calculates sqrt(a), following the selected rounding direction.
    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {
        unchecked {
            uint256 result = sqrt(a);
            return result + (((rounding == Rounding.Up) && ((result * result) < a)) ? 1 : 0);
        }
    }

    ///  @dev Return the log in base 2, rounded down, of a positive value.
    ///  Returns 0 if given 0.
    function log2(uint256 value) internal pure returns (uint256) {
        uint256 result = 0;
        unchecked {
            if ((value >> 128) > 0) {
                value >>= 128;
                result += 128;
            }
            if ((value >> 64) > 0) {
                value >>= 64;
                result += 64;
            }
            if ((value >> 32) > 0) {
                value >>= 32;
                result += 32;
            }
            if ((value >> 16) > 0) {
                value >>= 16;
                result += 16;
            }
            if ((value >> 8) > 0) {
                value >>= 8;
                result += 8;
            }
            if ((value >> 4) > 0) {
                value >>= 4;
                result += 4;
            }
            if ((value >> 2) > 0) {
                value >>= 2;
                result += 2;
            }
            if ((value >> 1) > 0) {
                result += 1;
            }
        }
        return result;
    }

    ///  @dev Return the log in base 2, following the selected rounding direction, of a positive value.
    ///  Returns 0 if given 0.
    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {
        unchecked {
            uint256 result = log2(value);
            return result + (((rounding == Rounding.Up) && ((1 << result) < value)) ? 1 : 0);
        }
    }

    ///  @dev Return the log in base 10, rounded down, of a positive value.
    ///  Returns 0 if given 0.
    function log10(uint256 value) internal pure returns (uint256) {
        uint256 result = 0;
        unchecked {
            if (value >= (10 ** 64)) {
                value /= 10 ** 64;
                result += 64;
            }
            if (value >= (10 ** 32)) {
                value /= 10 ** 32;
                result += 32;
            }
            if (value >= (10 ** 16)) {
                value /= 10 ** 16;
                result += 16;
            }
            if (value >= (10 ** 8)) {
                value /= 10 ** 8;
                result += 8;
            }
            if (value >= (10 ** 4)) {
                value /= 10 ** 4;
                result += 4;
            }
            if (value >= (10 ** 2)) {
                value /= 10 ** 2;
                result += 2;
            }
            if (value >= (10 ** 1)) {
                result += 1;
            }
        }
        return result;
    }

    ///  @dev Return the log in base 10, following the selected rounding direction, of a positive value.
    ///  Returns 0 if given 0.
    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {
        unchecked {
            uint256 result = log10(value);
            return result + (((rounding == Rounding.Up) && ((10 ** result) < value)) ? 1 : 0);
        }
    }

    ///  @dev Return the log in base 256, rounded down, of a positive value.
    ///  Returns 0 if given 0.
    ///  Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.
    function log256(uint256 value) internal pure returns (uint256) {
        uint256 result = 0;
        unchecked {
            if ((value >> 128) > 0) {
                value >>= 128;
                result += 16;
            }
            if ((value >> 64) > 0) {
                value >>= 64;
                result += 8;
            }
            if ((value >> 32) > 0) {
                value >>= 32;
                result += 4;
            }
            if ((value >> 16) > 0) {
                value >>= 16;
                result += 2;
            }
            if ((value >> 8) > 0) {
                result += 1;
            }
        }
        return result;
    }

    ///  @dev Return the log in base 256, following the selected rounding direction, of a positive value.
    ///  Returns 0 if given 0.
    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {
        unchecked {
            uint256 result = log256(value);
            return result + (((rounding == Rounding.Up) && ((1 << (result << 3)) < value)) ? 1 : 0);
        }
    }
}

///  @dev Standard signed math utilities missing in the Solidity language.
library SignedMath {
    ///  @dev Returns the largest of two signed numbers.
    function max(int256 a, int256 b) internal pure returns (int256) {
        return (a > b) ? a : b;
    }

    ///  @dev Returns the smallest of two signed numbers.
    function min(int256 a, int256 b) internal pure returns (int256) {
        return (a < b) ? a : b;
    }

    ///  @dev Returns the average of two signed numbers without overflow.
    ///  The result is rounded towards zero.
    function average(int256 a, int256 b) internal pure returns (int256) {
        int256 x = (a & b) + ((a ^ b) >> 1);
        return x + (int256(uint256(x) >> 255) & (a ^ b));
    }

    ///  @dev Returns the absolute unsigned value of a signed value.
    function abs(int256 n) internal pure returns (uint256) {
        unchecked {
            return uint256((n >= 0) ? n : (-n));
        }
    }
}

library __ScribbleUtilsLib__4295 {
    event AssertionFailed(string message);

    event AssertionFailedData(int eventId, bytes encodingData);

    function assertionFailed(string memory arg_0) internal {
        emit AssertionFailed(arg_0);
    }

    function assertionFailedData(int arg_0, bytes memory arg_1) internal {
        emit AssertionFailedData(arg_0, arg_1);
    }

    function isInContract() internal returns (bool res) {
        assembly {
            res := sload(0x5f0b92cf9616afdee4f4136f66393f1343b027f01be893fa569eb2e2b667a40c)
        }
    }

    function setInContract(bool v) internal {
        assembly {
            sstore(0x5f0b92cf9616afdee4f4136f66393f1343b027f01be893fa569eb2e2b667a40c, v)
        }
    }
}

///  @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.
///  The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,
///  thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding
///  they need in their contracts using a combination of `abi.encode` and `keccak256`.
///  This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding
///  scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA
///  ({_hashTypedDataV4}).
///  The implementation of the domain separator was designed to be as efficient as possible while still properly updating
///  the chain id to protect against replay attacks on an eventual fork of the chain.
///  NOTE: This contract implements the version of the encoding known as "v4", as implemented by the JSON RPC method
///  https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].
///  NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain
///  separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the
///  separator from the immutable values, which is cheaper than accessing a cached version in cold storage.
///  _Available since v3.4._
///  @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment
abstract contract EIP712 is IERC5267 {
    using ShortStrings for *;

    bytes32 private constant _TYPE_HASH = keccak256("EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)");
    bytes32 private immutable _cachedDomainSeparator;
    uint256 private immutable _cachedChainId;
    address private immutable _cachedThis;
    bytes32 private immutable _hashedName;
    bytes32 private immutable _hashedVersion;
    ShortString private immutable _name;
    ShortString private immutable _version;
    string private _nameFallback;
    string private _versionFallback;

    ///  @dev Initializes the domain separator and parameter caches.
    ///  The meaning of `name` and `version` is specified in
    ///  https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:
    ///  - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.
    ///  - `version`: the current major version of the signing domain.
    ///  NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart
    ///  contract upgrade].
    constructor(string memory name, string memory version) {
        _name = name.toShortStringWithFallback(_nameFallback);
        _version = version.toShortStringWithFallback(_versionFallback);
        _hashedName = keccak256(bytes(name));
        _hashedVersion = keccak256(bytes(version));
        _cachedChainId = block.chainid;
        _cachedDomainSeparator = _buildDomainSeparator();
        _cachedThis = address(this);
    }

    ///  @dev Returns the domain separator for the current chain.
    function _domainSeparatorV4() internal view returns (bytes32) {
        if ((address(this) == _cachedThis) && (block.chainid == _cachedChainId)) {
            return _cachedDomainSeparator;
        } else {
            return _buildDomainSeparator();
        }
    }

    function _buildDomainSeparator() private view returns (bytes32) {
        return keccak256(abi.encode(_TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));
    }

    ///  @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this
    ///  function returns the hash of the fully encoded EIP712 message for this domain.
    ///  This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:
    ///  ```solidity
    ///  bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(
    ///      keccak256("Mail(address to,string contents)"),
    ///      mailTo,
    ///      keccak256(bytes(mailContents))
    ///  )));
    ///  address signer = ECDSA.recover(digest, signature);
    ///  ```
    function _hashTypedDataV4(bytes32 structHash) virtual internal view returns (bytes32) {
        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);
    }

    ///  @dev See {EIP-5267}.
    ///  _Available since v4.9._
    function eip712Domain() virtual override public view returns (bytes1 fields, string memory name, string memory version, uint256 chainId, address verifyingContract, bytes32 salt, uint256[] memory extensions) {
        return (hex"0f", _name.toStringWithFallback(_nameFallback), _version.toStringWithFallback(_versionFallback), block.chainid, address(this), bytes32(0), new uint256[](0));
    }
}

///  @dev Interface for the optional metadata functions from the ERC20 standard.
///  _Available since v4.1._
interface IERC20Metadata is IERC20 {
    ///  @dev Returns the name of the token.
    function name() external view returns (string memory);

    ///  @dev Returns the symbol of the token.
    function symbol() external view returns (string memory);

    ///  @dev Returns the decimals places of the token.
    function decimals() external view returns (uint8);
}

///  @dev Contract module which provides a basic access control mechanism, where
///  there is an account (an owner) that can be granted exclusive access to
///  specific functions.
///  By default, the owner account will be the one that deploys the contract. This
///  can later be changed with {transferOwnership}.
///  This module is used through inheritance. It will make available the modifier
///  `onlyOwner`, which can be applied to your functions to restrict their use to
///  the owner.
abstract contract Ownable is Context {
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    address private _owner;

    ///  @dev Throws if called by any account other than the owner.
    modifier onlyOwner() {
        _checkOwner();
        _;
    }

    ///  @dev Initializes the contract setting the deployer as the initial owner.
    constructor() {
        _transferOwnership(_msgSender());
    }

    ///  @dev Returns the address of the current owner.
    function owner() virtual public view returns (address) {
        return _owner;
    }

    ///  @dev Throws if the sender is not the owner.
    function _checkOwner() virtual internal view {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
    }

    ///  @dev Leaves the contract without owner. It will not be possible to call
    ///  `onlyOwner` functions. Can only be called by the current owner.
    ///  NOTE: Renouncing ownership will leave the contract without an owner,
    ///  thereby disabling any functionality that is only available to the owner.
    function renounceOwnership() virtual public onlyOwner() {
        _transferOwnership(address(0));
    }

    ///  @dev Transfers ownership of the contract to a new account (`newOwner`).
    ///  Can only be called by the current owner.
    function transferOwnership(address newOwner) virtual public onlyOwner() {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    ///  @dev Transfers ownership of the contract to a new account (`newOwner`).
    ///  Internal function without access restriction.
    function _transferOwnership(address newOwner) virtual internal {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

///  @dev Contract module which allows children to implement an emergency stop
///  mechanism that can be triggered by an authorized account.
///  This module is used through inheritance. It will make available the
///  modifiers `whenNotPaused` and `whenPaused`, which can be applied to
///  the functions of your contract. Note that they will not be pausable by
///  simply including this module, only once the modifiers are put in place.
abstract contract Pausable is Context {
    ///  @dev Emitted when the pause is triggered by `account`.
    event Paused(address account);

    ///  @dev Emitted when the pause is lifted by `account`.
    event Unpaused(address account);

    bool private _paused;

    ///  @dev Modifier to make a function callable only when the contract is not paused.
    ///  Requirements:
    ///  - The contract must not be paused.
    modifier whenNotPaused() {
        _requireNotPaused();
        _;
    }

    ///  @dev Modifier to make a function callable only when the contract is paused.
    ///  Requirements:
    ///  - The contract must be paused.
    modifier whenPaused() {
        _requirePaused();
        _;
    }

    ///  @dev Initializes the contract in unpaused state.
    constructor() {
        _paused = false;
    }

    ///  @dev Returns true if the contract is paused, and false otherwise.
    function paused() virtual public view returns (bool) {
        return _paused;
    }

    ///  @dev Throws if the contract is paused.
    function _requireNotPaused() virtual internal view {
        require(!paused(), "Pausable: paused");
    }

    ///  @dev Throws if the contract is not paused.
    function _requirePaused() virtual internal view {
        require(paused(), "Pausable: not paused");
    }

    ///  @dev Triggers stopped state.
    ///  Requirements:
    ///  - The contract must not be paused.
    function _pause() virtual internal whenNotPaused() {
        _paused = true;
        emit Paused(_msgSender());
    }

    ///  @dev Returns to normal state.
    ///  Requirements:
    ///  - The contract must be paused.
    function _unpause() virtual internal whenPaused() {
        _paused = false;
        emit Unpaused(_msgSender());
    }
}

///  @dev Implementation of the {IERC165} interface.
///  Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check
///  for the additional interface id that will be supported. For example:
///  ```solidity
///  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
///      return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);
///  }
///  ```
///  Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.
abstract contract ERC165 is IERC165 {
    ///  @dev See {IERC165-supportsInterface}.
    function supportsInterface(bytes4 interfaceId) virtual override public view returns (bool) {
        return interfaceId == type(IERC165).interfaceId;
    }
}

///  @dev Implementation of the {IERC20} interface.
///  This implementation is agnostic to the way tokens are created. This means
///  that a supply mechanism has to be added in a derived contract using {_mint}.
///  For a generic mechanism see {ERC20PresetMinterPauser}.
///  TIP: For a detailed writeup see our guide
///  https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How
///  to implement supply mechanisms].
///  The default value of {decimals} is 18. To change this, you should override
///  this function so it returns a different value.
///  We have followed general OpenZeppelin Contracts guidelines: functions revert
///  instead returning `false` on failure. This behavior is nonetheless
///  conventional and does not conflict with the expectations of ERC20
///  applications.
///  Additionally, an {Approval} event is emitted on calls to {transferFrom}.
///  This allows applications to reconstruct the allowance for all accounts just
///  by listening to said events. Other implementations of the EIP may not emit
///  these events, as it isn't required by the specification.
///  Finally, the non-standard {decreaseAllowance} and {increaseAllowance}
///  functions have been added to mitigate the well-known issues around setting
///  allowances. See {IERC20-approve}.
contract ERC20 is Context, IERC20, IERC20Metadata {
    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;
    uint256 private _totalSupply;
    string private _name;
    string private _symbol;

    ///  @dev Sets the values for {name} and {symbol}.
    ///  All two of these values are immutable: they can only be set once during
    ///  construction.
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    ///  @dev Returns the name of the token.
    function name() virtual override public view returns (string memory) {
        return _name;
    }

    ///  @dev Returns the symbol of the token, usually a shorter version of the
    ///  name.
    function symbol() virtual override public view returns (string memory) {
        return _symbol;
    }

    ///  @dev Returns the number of decimals used to get its user representation.
    ///  For example, if `decimals` equals `2`, a balance of `505` tokens should
    ///  be displayed to a user as `5.05` (`505 / 10 ** 2`).
    ///  Tokens usually opt for a value of 18, imitating the relationship between
    ///  Ether and Wei. This is the default value returned by this function, unless
    ///  it's overridden.
    ///  NOTE: This information is only used for _display_ purposes: it in
    ///  no way affects any of the arithmetic of the contract, including
    ///  {IERC20-balanceOf} and {IERC20-transfer}.
    function decimals() virtual override public view returns (uint8) {
        return 18;
    }

    ///  @dev See {IERC20-totalSupply}.
    function totalSupply() virtual override public view returns (uint256) {
        return _totalSupply;
    }

    ///  @dev See {IERC20-balanceOf}.
    function balanceOf(address account) virtual override public view returns (uint256) {
        return _balances[account];
    }

    ///  @dev See {IERC20-transfer}.
    ///  Requirements:
    ///  - `to` cannot be the zero address.
    ///  - the caller must have a balance of at least `amount`.
    function transfer(address to, uint256 amount) virtual override public returns (bool) {
        address owner = _msgSender();
        _transfer(owner, to, amount);
        return true;
    }

    ///  @dev See {IERC20-allowance}.
    function allowance(address owner, address spender) virtual override public view returns (uint256) {
        return _allowances[owner][spender];
    }

    ///  @dev See {IERC20-approve}.
    ///  NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on
    ///  `transferFrom`. This is semantically equivalent to an infinite approval.
    ///  Requirements:
    ///  - `spender` cannot be the zero address.
    function approve(address spender, uint256 amount) virtual override public returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, amount);
        return true;
    }

    ///  @dev See {IERC20-transferFrom}.
    ///  Emits an {Approval} event indicating the updated allowance. This is not
    ///  required by the EIP. See the note at the beginning of {ERC20}.
    ///  NOTE: Does not update the allowance if the current allowance
    ///  is the maximum `uint256`.
    ///  Requirements:
    ///  - `from` and `to` cannot be the zero address.
    ///  - `from` must have a balance of at least `amount`.
    ///  - the caller must have allowance for ``from``'s tokens of at least
    ///  `amount`.
    function transferFrom(address from, address to, uint256 amount) virtual override public returns (bool) {
        address spender = _msgSender();
        _spendAllowance(from, spender, amount);
        _transfer(from, to, amount);
        return true;
    }

    ///  @dev Atomically increases the allowance granted to `spender` by the caller.
    ///  This is an alternative to {approve} that can be used as a mitigation for
    ///  problems described in {IERC20-approve}.
    ///  Emits an {Approval} event indicating the updated allowance.
    ///  Requirements:
    ///  - `spender` cannot be the zero address.
    function increaseAllowance(address spender, uint256 addedValue) virtual public returns (bool) {
        address owner = _msgSender();
        _approve(owner, spender, allowance(owner, spender) + addedValue);
        return true;
    }

    ///  @dev Atomically decreases the allowance granted to `spender` by the caller.
    ///  This is an alternative to {approve} that can be used as a mitigation for
    ///  problems described in {IERC20-approve}.
    ///  Emits an {Approval} event indicating the updated allowance.
    ///  Requirements:
    ///  - `spender` cannot be the zero address.
    ///  - `spender` must have allowance for the caller of at least
    ///  `subtractedValue`.
    function decreaseAllowance(address spender, uint256 subtractedValue) virtual public returns (bool) {
        address owner = _msgSender();
        uint256 currentAllowance = allowance(owner, spender);
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
        unchecked {
            _approve(owner, spender, currentAllowance - subtractedValue);
        }
        return true;
    }

    ///  @dev Moves `amount` of tokens from `from` to `to`.
    ///  This internal function is equivalent to {transfer}, and can be used to
    ///  e.g. implement automatic token fees, slashing mechanisms, etc.
    ///  Emits a {Transfer} event.
    ///  Requirements:
    ///  - `from` cannot be the zero address.
    ///  - `to` cannot be the zero address.
    ///  - `from` must have a balance of at least `amount`.
    function _transfer(address from, address to, uint256 amount) virtual internal {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");
        _beforeTokenTransfer(from, to, amount);
        uint256 fromBalance = _balances[from];
        require(fromBalance >= amount, "ERC20: transfer amount exceeds balance");
        unchecked {
            _balances[from] = fromBalance - amount;
            _balances[to] += amount;
        }
        emit Transfer(from, to, amount);
        _afterTokenTransfer(from, to, amount);
    }

    /// @dev Creates `amount` tokens and assigns them to `account`, increasing
    ///  the total supply.
    ///  Emits a {Transfer} event with `from` set to the zero address.
    ///  Requirements:
    ///  - `account` cannot be the zero address.
    function _mint(address account, uint256 amount) virtual internal {
        require(account != address(0), "ERC20: mint to the zero address");
        _beforeTokenTransfer(address(0), account, amount);
        _totalSupply += amount;
        unchecked {
            _balances[account] += amount;
        }
        emit Transfer(address(0), account, amount);
        _afterTokenTransfer(address(0), account, amount);
    }

    ///  @dev Destroys `amount` tokens from `account`, reducing the
    ///  total supply.
    ///  Emits a {Transfer} event with `to` set to the zero address.
    ///  Requirements:
    ///  - `account` cannot be the zero address.
    ///  - `account` must have at least `amount` tokens.
    function _burn(address account, uint256 amount) virtual internal {
        require(account != address(0), "ERC20: burn from the zero address");
        _beforeTokenTransfer(account, address(0), amount);
        uint256 accountBalance = _balances[account];
        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
        unchecked {
            _balances[account] = accountBalance - amount;
            _totalSupply -= amount;
        }
        emit Transfer(account, address(0), amount);
        _afterTokenTransfer(account, address(0), amount);
    }

    ///  @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.
    ///  This internal function is equivalent to `approve`, and can be used to
    ///  e.g. set automatic allowances for certain subsystems, etc.
    ///  Emits an {Approval} event.
    ///  Requirements:
    ///  - `owner` cannot be the zero address.
    ///  - `spender` cannot be the zero address.
    function _approve(address owner, address spender, uint256 amount) virtual internal {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");
        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    ///  @dev Updates `owner` s allowance for `spender` based on spent `amount`.
    ///  Does not update the allowance amount in case of infinite allowance.
    ///  Revert if not enough allowance is available.
    ///  Might emit an {Approval} event.
    function _spendAllowance(address owner, address spender, uint256 amount) virtual internal {
        uint256 currentAllowance = allowance(owner, spender);
        if (currentAllowance != type(uint256).max) {
            require(currentAllowance >= amount, "ERC20: insufficient allowance");
            unchecked {
                _approve(owner, spender, currentAllowance - amount);
            }
        }
    }

    ///  @dev Hook that is called before any transfer of tokens. This includes
    ///  minting and burning.
    ///  Calling conditions:
    ///  - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
    ///  will be transferred to `to`.
    ///  - when `from` is zero, `amount` tokens will be minted for `to`.
    ///  - when `to` is zero, `amount` of ``from``'s tokens will be burned.
    ///  - `from` and `to` are never both zero.
    ///  To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
    function _beforeTokenTransfer(address from, address to, uint256 amount) virtual internal {}

    ///  @dev Hook that is called after any transfer of tokens. This includes
    ///  minting and burning.
    ///  Calling conditions:
    ///  - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens
    ///  has been transferred to `to`.
    ///  - when `from` is zero, `amount` tokens have been minted for `to`.
    ///  - when `to` is zero, `amount` of ``from``'s tokens have been burned.
    ///  - `from` and `to` are never both zero.
    ///  To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].
    function _afterTokenTransfer(address from, address to, uint256 amount) virtual internal {}
}

///  @dev Contract module that allows children to implement role-based access
///  control mechanisms. This is a lightweight version that doesn't allow enumerating role
///  members except through off-chain means by accessing the contract event logs. Some
///  applications may benefit from on-chain enumerability, for those cases see
///  {AccessControlEnumerable}.
///  Roles are referred to by their `bytes32` identifier. These should be exposed
///  in the external API and be unique. The best way to achieve this is by
///  using `public constant` hash digests:
///  ```solidity
///  bytes32 public constant MY_ROLE = keccak256("MY_ROLE");
///  ```
///  Roles can be used to represent a set of permissions. To restrict access to a
///  function call, use {hasRole}:
///  ```solidity
///  function foo() public {
///      require(hasRole(MY_ROLE, msg.sender));
///      ...
///  }
///  ```
///  Roles can be granted and revoked dynamically via the {grantRole} and
///  {revokeRole} functions. Each role has an associated admin role, and only
///  accounts that have a role's admin role can call {grantRole} and {revokeRole}.
///  By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means
///  that only accounts with this role will be able to grant or revoke other
///  roles. More complex role relationships can be created by using
///  {_setRoleAdmin}.
///  WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to
///  grant and revoke this role. Extra precautions should be taken to secure
///  accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}
///  to enforce additional security measures for this role.
abstract contract AccessControl is Context, IAccessControl, ERC165 {
    struct RoleData {
        mapping(address => bool) members;
        bytes32 adminRole;
    }

    mapping(bytes32 => RoleData) private _roles;
    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;

    ///  @dev Modifier that checks that an account has a specific role. Reverts
    ///  with a standardized message including the required role.
    ///  The format of the revert reason is given by the following regular expression:
    ///   /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/
    ///  _Available since v4.1._
    modifier onlyRole(bytes32 role) {
        _checkRole(role);
        _;
    }

    ///  @dev See {IERC165-supportsInterface}.
    function supportsInterface(bytes4 interfaceId) virtual override public view returns (bool) {
        return (interfaceId == type(IAccessControl).interfaceId) || super.supportsInterface(interfaceId);
    }

    ///  @dev Returns `true` if `account` has been granted `role`.
    function hasRole(bytes32 role, address account) virtual override public view returns (bool) {
        return _roles[role].members[account];
    }

    ///  @dev Revert with a standard message if `_msgSender()` is missing `role`.
    ///  Overriding this function changes the behavior of the {onlyRole} modifier.
    ///  Format of the revert message is described in {_checkRole}.
    ///  _Available since v4.6._
    function _checkRole(bytes32 role) virtual internal view {
        _checkRole(role, _msgSender());
    }

    ///  @dev Revert with a standard message if `account` is missing `role`.
    ///  The format of the revert reason is given by the following regular expression:
    ///   /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/
    function _checkRole(bytes32 role, address account) virtual internal view {
        if (!hasRole(role, account)) {
            revert(string(abi.encodePacked("AccessControl: account ", Strings.toHexString(account), " is missing role ", Strings.toHexString(uint256(role), 32))));
        }
    }

    ///  @dev Returns the admin role that controls `role`. See {grantRole} and
    ///  {revokeRole}.
    ///  To change a role's admin, use {_setRoleAdmin}.
    function getRoleAdmin(bytes32 role) virtual override public view returns (bytes32) {
        return _roles[role].adminRole;
    }

    ///  @dev Grants `role` to `account`.
    ///  If `account` had not been already granted `role`, emits a {RoleGranted}
    ///  event.
    ///  Requirements:
    ///  - the caller must have ``role``'s admin role.
    ///  May emit a {RoleGranted} event.
    function grantRole(bytes32 role, address account) virtual override public onlyRole(getRoleAdmin(role)) {
        _grantRole(role, account);
    }

    ///  @dev Revokes `role` from `account`.
    ///  If `account` had been granted `role`, emits a {RoleRevoked} event.
    ///  Requirements:
    ///  - the caller must have ``role``'s admin role.
    ///  May emit a {RoleRevoked} event.
    function revokeRole(bytes32 role, address account) virtual override public onlyRole(getRoleAdmin(role)) {
        _revokeRole(role, account);
    }

    ///  @dev Revokes `role` from the calling account.
    ///  Roles are often managed via {grantRole} and {revokeRole}: this function's
    ///  purpose is to provide a mechanism for accounts to lose their privileges
    ///  if they are compromised (such as when a trusted device is misplaced).
    ///  If the calling account had been revoked `role`, emits a {RoleRevoked}
    ///  event.
    ///  Requirements:
    ///  - the caller must be `account`.
    ///  May emit a {RoleRevoked} event.
    function renounceRole(bytes32 role, address account) virtual override public {
        require(account == _msgSender(), "AccessControl: can only renounce roles for self");
        _revokeRole(role, account);
    }

    ///  @dev Grants `role` to `account`.
    ///  If `account` had not been already granted `role`, emits a {RoleGranted}
    ///  event. Note that unlike {grantRole}, this function doesn't perform any
    ///  checks on the calling account.
    ///  May emit a {RoleGranted} event.
    ///  [WARNING]
    ///  ====
    ///  This function should only be called from the constructor when setting
    ///  up the initial roles for the system.
    ///  Using this function in any other way is effectively circumventing the admin
    ///  system imposed by {AccessControl}.
    ///  ====
    ///  NOTE: This function is deprecated in favor of {_grantRole}.
    function _setupRole(bytes32 role, address account) virtual internal {
        _grantRole(role, account);
    }

    ///  @dev Sets `adminRole` as ``role``'s admin role.
    ///  Emits a {RoleAdminChanged} event.
    function _setRoleAdmin(bytes32 role, bytes32 adminRole) virtual internal {
        bytes32 previousAdminRole = getRoleAdmin(role);
        _roles[role].adminRole = adminRole;
        emit RoleAdminChanged(role, previousAdminRole, adminRole);
    }

    ///  @dev Grants `role` to `account`.
    ///  Internal function without access restriction.
    ///  May emit a {RoleGranted} event.
    function _grantRole(bytes32 role, address account) virtual internal {
        if (!hasRole(role, account)) {
            _roles[role].members[account] = true;
            emit RoleGranted(role, account, _msgSender());
        }
    }

    ///  @dev Revokes `role` from `account`.
    ///  Internal function without access restriction.
    ///  May emit a {RoleRevoked} event.
    function _revokeRole(bytes32 role, address account) virtual internal {
        if (hasRole(role, account)) {
            _roles[role].members[account] = false;
            emit RoleRevoked(role, account, _msgSender());
        }
    }
}

///  @dev Extension of {ERC20} that allows token holders to destroy both their own
///  tokens and those that they have an allowance for, in a way that can be
///  recognized off-chain (via event analysis).
abstract contract ERC20Burnable is Context, ERC20 {
    ///  @dev Destroys `amount` tokens from the caller.
    ///  See {ERC20-_burn}.
    function burn(uint256 amount) virtual public {
        _burn(_msgSender(), amount);
    }

    ///  @dev Destroys `amount` tokens from `account`, deducting from the caller's
    ///  allowance.
    ///  See {ERC20-_burn} and {ERC20-allowance}.
    ///  Requirements:
    ///  - the caller must have allowance for ``accounts``'s tokens of at least
    ///  `amount`.
    function burnFrom(address account, uint256 amount) virtual public {
        _spendAllowance(account, _msgSender(), amount);
        _burn(account, amount);
    }
}

///  @dev Extension of {ERC20} that adds a cap to the supply of tokens.
abstract contract ERC20Capped is ERC20 {
    uint256 private immutable _cap;

    ///  @dev Sets the value of the `cap`. This value is immutable, it can only be
    ///  set once during construction.
    constructor(uint256 cap_) {
        require(cap_ > 0, "ERC20Capped: cap is 0");
        _cap = cap_;
    }

    ///  @dev Returns the cap on the token's total supply.
    function cap() virtual public view returns (uint256) {
        return _cap;
    }

    ///  @dev See {ERC20-_mint}.
    function _mint(address account, uint256 amount) virtual override internal {
        require((ERC20.totalSupply() + amount) <= cap(), "ERC20Capped: cap exceeded");
        super._mint(account, amount);
    }
}

///  @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in
///  https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].
///  Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by
///  presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't
///  need to send a transaction, and thus is not required to hold Ether at all.
///  _Available since v3.4._
abstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {
    using Counters for Counters.Counter;

    mapping(address => Counters.Counter) private _nonces;
    bytes32 private constant _PERMIT_TYPEHASH = keccak256("Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)");
    ///  @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.
    ///  However, to ensure consistency with the upgradeable transpiler, we will continue
    ///  to reserve a slot.
    ///  @custom:oz-renamed-from _PERMIT_TYPEHASH
    bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;

    ///  @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `"1"`.
    ///  It's a good idea to use the same `name` that is defined as the ERC20 token name.
    constructor(string memory name) EIP712(name,"1") {}

    ///  @inheritdoc IERC20Permit
    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) virtual override public {
        require(block.timestamp <= deadline, "ERC20Permit: expired deadline");
        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));
        bytes32 hash = _hashTypedDataV4(structHash);
        address signer = ECDSA.recover(hash, v, r, s);
        require(signer == owner, "ERC20Permit: invalid signature");
        _approve(owner, spender, value);
    }

    ///  @inheritdoc IERC20Permit
    function nonces(address owner) virtual override public view returns (uint256) {
        return _nonces[owner].current();
    }

    ///  @inheritdoc IERC20Permit
    function DOMAIN_SEPARATOR() override external view returns (bytes32) {
        return _domainSeparatorV4();
    }

    ///  @dev "Consume a nonce": return the current value and increment.
    ///  _Available since v4.1._
    function _useNonce(address owner) virtual internal returns (uint256 current) {
        Counters.Counter storage nonce = _nonces[owner];
        current = nonce.current();
        nonce.increment();
    }
}

contract USDTgToken is ERC20, ERC20Capped, ERC20Burnable, Pausable, Ownable, AccessControl, ERC20Permit {
    event ProposalCreated(address indexed proposer, uint256 proposalId, string description);

    event Blacklisted(address indexed account, bool value);

    event FeeUpdated(uint256 newFeePercent, address newFeeRecipient);

    struct vars1 {
        uint256 old_0;
    }

    struct vars2 {
        uint256 old_1;
    }

    mapping(address => bool) public blacklisted;
    mapping(address => uint256) private lastTransferTimestamp;
    uint256 public constant minDelay = 60;
    bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");
    uint256 public feePercent;
    address public feeRecipient;

    constructor() ERC20("Tetherground USD","USDTg") ERC20Capped(10_000_000_000 * (10 ** decimals())) ERC20Permit("USDTg") {
        _mint(msg.sender, 10_000_000_000 * (10 ** decimals()));
        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);
        _grantRole(MINTER_ROLE, msg.sender);
        feeRecipient = msg.sender;
        feePercent = 0;
    }

    function pause() public onlyOwner() {
        _pause();
        emit Paused(msg.sender);
    }

    function unpause() public onlyOwner() {
        _unpause();
        emit Unpaused(msg.sender);
    }

    function blacklist(address account, bool value) public {
        _original_USDTgToken_blacklist(account, value);
        unchecked {
            if (!(blacklisted[account] == value)) {
                emit __ScribbleUtilsLib__4295.AssertionFailed("075571:0091:000 0: Blacklist state updated");
            }
        }
    }

    function _original_USDTgToken_blacklist(address account, bool value) internal onlyOwner() {
        blacklisted[account] = value;
        emit Blacklisted(account, value);
    }

    function setFee(uint256 feePercent_, address feeRecipient_) external onlyOwner() {
        require(feePercent_ <= 500, "Fee too high");
        require(feeRecipient_ != address(0), "Invalid recipient");
        feePercent = feePercent_;
        feeRecipient = feeRecipient_;
        emit FeeUpdated(feePercent_, feeRecipient_);
    }

    function mint(address to, uint256 amount) external {
        vars1 memory _v;
        unchecked {
            _v.old_0 = totalSupply();
        }
        _original_USDTgToken_mint(to, amount);
        unchecked {
            if (!(totalSupply() == (_v.old_0 + amount))) {
                emit __ScribbleUtilsLib__4295.AssertionFailed("076509:0113:000 1: Minted tokens correctly increase total supply");
            }
        }
    }

    function _original_USDTgToken_mint(address to, uint256 amount) internal onlyRole(MINTER_ROLE) {
        _mint(to, amount);
    }

    function rescueTokens(address tokenAddress, uint256 amount) external onlyOwner() {
        require(tokenAddress != address(this), "Cannot rescue this token");
        require(IERC20(tokenAddress).transfer(owner(), amount), "Transfer failed");
    }

    function createProposal(string calldata description) external {
        emit ProposalCreated(msg.sender, uint256(keccak256(abi.encodePacked(msg.sender, description, block.number))), description);
    }

    function _mint(address account, uint256 amount) override(ERC20, ERC20Capped) internal {
        super._mint(account, amount);
    }

    function _transfer(address from, address to, uint256 amount) override internal {
        vars2 memory _v;
        unchecked {
            _v.old_1 = balanceOf(to);
        }
        _original_USDTgToken__transfer(from, to, amount);
        unchecked {
            if (!((blacklisted[to] == false) && (balanceOf(to) >= _v.old_1))) {
                emit __ScribbleUtilsLib__4295.AssertionFailed("077739:0112:000 2: Recipient receives at least amount minus fee");
            }
        }
    }

    function _original_USDTgToken__transfer(address from, address to, uint256 amount) internal {
        require((!blacklisted[from]) && (!blacklisted[to]), "Blacklisted address");
        require((block.timestamp - lastTransferTimestamp[from]) >= minDelay, "Transfer too soon, anti-bot protection");
        lastTransferTimestamp[from] = block.timestamp;
        if (((((feePercent > 0) && (from != address(0))) && (to != address(0))) && (from != feeRecipient)) && (to != feeRecipient)) {
            uint256 fee = (amount * feePercent) / 10000;
            uint256 sendAmount = amount - fee;
            super._transfer(from, feeRecipient, fee);
            super._transfer(from, to, sendAmount);
        } else {
            super._transfer(from, to, amount);
        }
    }

    function decimals() virtual override public view returns (uint8) {
        return 18;
    }
}